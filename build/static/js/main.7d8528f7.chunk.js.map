{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","delete","concat","Input","_ref","value","onChange","label","react_default","a","createElement","Persons","_ref2","persons","deletePerson","map","person","App_Person","key","AddPerson","_ref3","newName","handleNameChange","newNumber","handleNumberChange","addPerson","onSubmit","App_Input","type","Person","_ref4","name","number","onClick","event","preventDefault","Notification","_ref5","message","className","App","_useState","useState","_useState2","Object","slicedToArray","setNewName","_useState3","_useState4","setNewNumber","_useState5","_useState6","setPersons","_useState7","_useState8","search","setSearch","_useState9","_useState10","setMessage","hook","personService","initialPersons","useEffect","App_Notification","target","App_AddPerson","personObject","filter","elementti","length","window","alert","returnedNote","setTimeout","App_Persons","toUpperCase","includes","confirm","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d8528f7.chunk.js","sourcesContent":["import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/persons'\n// const baseUrl = 'https://fullstack-3.herokuapp.com/api/persons'\nconst baseUrl = '/api/persons'\n\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\nimport personService from './services/persons'\nimport './App.css';\n\nconst App = () => {\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [persons, setPersons] = useState([])\n    const [search, setSearch] = useState('')\n    const [message, setMessage] = useState(null)\n\n\n    const handleSearchChange = (event) => {\n        // console.log(event.target.value)\n        setSearch(event.target.value)\n    }\n\n    const handleNameChange = (event) => {\n        // console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n    const handleNumberChange = (event) => {\n        // console.log(event.target.value)\n        setNewNumber(event.target.value)\n    }\n\n\n\n    const hook = () => {\n        // console.log('effect')\n        personService\n            .getAll()\n            .then(initialPersons => {\n                // console.log('promise fulfilled')\n                setPersons(initialPersons)\n            })\n    }\n    useEffect(hook, [])\n\n\n\n    const addPerson = (event) => {\n        event.preventDefault()\n        const personObject = {\n            name: newName,\n            number: newNumber,\n            // id: persons.length + 1,\n        }\n        if (persons.filter(elementti => elementti.name === newName).length > 0) {\n            window.alert(`${newName} on jo luettelossa`)\n        } else {\n            personService\n                .create(personObject)\n                .then(returnedNote => {\n                    setPersons(persons.concat(returnedNote))\n                })\n            setMessage(\n                `${newName} lisätty`\n            )\n            setTimeout(() => {\n                setMessage(null)\n            }, 5000)\n        }\n        setNewName('')\n        setNewNumber('')\n    }\n\n    const deletePerson = (id, name) => {\n        if (window.confirm(\"Poistetaanko \" + name)) {\n            personService\n                .remove(id)\n                .then(\n                    // setPersons(persons.splice(id, 1))\n                    hook\n                )\n                setMessage(\n                    `${name} poistettu`\n                )\n                setTimeout(() => {\n                    setMessage(null)\n                }, 5000)\n        }\n    }\n\n    return (\n        <div>\n            <Notification message={message} />\n            <h2>Puhelinluettelo</h2>\n            <Input\n                value={search}\n                onChange={handleSearchChange}\n                label='rajaa näytettäviä'\n            />\n            <h2>Numerot</h2>\n            <h3>lisää uusi</h3>\n            <AddPerson\n                persons={persons}\n                setPersons={setPersons}\n                newName={newName}\n                handleNameChange={handleNameChange}\n                newNumber={newNumber}\n                handleNumberChange={handleNumberChange}\n                addPerson={addPerson}\n\n            />\n\n            <Persons\n                persons={persons.filter(elementti => elementti.name.toUpperCase().includes(search.toUpperCase()))}\n                deletePerson={deletePerson}\n            />\n        </div>\n    )\n}\n\nconst Input = ({ value, onChange, label }) => (\n    <div>\n        <label>{label} </label>\n        <input\n            value={value}\n            onChange={onChange}\n        />\n    </div>\n\n)\n\nconst Persons = ({ persons, deletePerson }) => persons.map(person =>\n    <Person\n        key={person.id}\n        person={person}\n        deletePerson={deletePerson}\n    />\n)\n\nconst AddPerson = ({ newName, handleNameChange, newNumber, handleNumberChange, addPerson }) => {\n    return (\n        <form onSubmit={addPerson}>\n            <div>\n                <label>nimi:</label>\n                <Input\n                    value={newName}\n                    onChange={handleNameChange}\n                />\n                <br />\n                <label>numero:</label>\n                <Input\n                    value={newNumber}\n                    onChange={handleNumberChange}\n                />\n            </div>\n            <div>\n                <button type=\"submit\">lisää</button>\n            </div>\n        </form>\n    )\n}\n\n\nconst Person = ({ person, deletePerson }) => {\n\n    const deleteEvent = (event) => {\n        event.preventDefault()\n        deletePerson(person.id, person.name)\n    }\n\n    return (\n        <p>\n            {person.name}, {person.number} <button onClick={deleteEvent}>poista</button>\n        </p>\n    )\n\n}\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"notification\">\n            {message}\n        </div>\n    )\n}\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}